import sqlite3
from .config import DB_PATH, ALLOWED_SENDER
from datetime import datetime, timedelta
from .logger import print_status
from .paths import DATA_DIR
import threading
from contextlib import contextmanager
from typing import Optional, List, Dict, Any, Generator

# Thread-local storage for database connections
_local = threading.local()

@contextmanager
def get_db_connection(commit_on_success: bool = True) -> Generator[sqlite3.Connection, None, None]:
    """
    سياق آمن للحصول على اتصال بقاعدة البيانات
    يضمن إغلاق الاتصال بشكل صحيح وإدارة المعاملات
    """
    if not hasattr(_local, 'conn') or _local.conn is None:
        _local.conn = sqlite3.connect(DB_PATH, timeout=20)
        _local.conn.execute('PRAGMA journal_mode=WAL')  # تحسين الأداء والتزامن
        _local.conn.execute('PRAGMA synchronous=NORMAL')  # توازن بين الأداء والأمان
        _local.conn.row_factory = sqlite3.Row

    try:
        yield _local.conn
        if commit_on_success:
            _local.conn.commit()
    except Exception as e:
        _local.conn.rollback()
        raise e
    finally:
        if commit_on_success:
            _local.conn.close()
            _local.conn = None

def parse_modem_date(date_str):
    """تحويل التاريخ من صيغة المودم إلى صيغة SQLite"""
    try:
        if not date_str:
            return datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
        if ',' in date_str:
            date_part, time_part = date_str.split(',')
            time_part = time_part.split('+')[0].split('-')[0]
            
            year, month, day = map(int, date_part.split('/'))
            hour, minute, second = map(int, time_part.split(':'))
            
            year = 2000 + year
            
            return f"{year:04d}-{month:02d}-{day:02d} {hour:02d}:{minute:02d}:{second:02d}"
    except Exception as e:
        print_status(f"خطأ في تحويل التاريخ {date_str}: {e}", "ERROR")
        return datetime.now().strftime('%Y-%m-%d %H:%M:%S')

def init_db():
    """تهيئة قاعدة البيانات وإنشاء الجداول"""
    with get_db_connection() as conn:
        c = conn.cursor()
        
        # إنشاء الجداول مع الفهارس المناسبة
        c.executescript('''
            -- جدول المستخدمين
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id TEXT UNIQUE NOT NULL,
                username TEXT,
                phone_number TEXT,
                first_name TEXT,
                last_name TEXT,
                is_admin INTEGER DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            );
            CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);            -- جدول الرسائل
            CREATE TABLE IF NOT EXISTS sms (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                status TEXT DEFAULT 'REC UNREAD',
                sender TEXT NOT NULL,
                received_date TEXT NOT NULL,
                content TEXT,
                is_sent_to_telegram INTEGER DEFAULT 0,
                verified_by INTEGER,
                deleted_from_sim INTEGER DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (verified_by) REFERENCES users(id)
            );
            CREATE INDEX IF NOT EXISTS idx_sms_sender ON sms(sender);
            CREATE INDEX IF NOT EXISTS idx_sms_date ON sms(received_date);
            CREATE INDEX IF NOT EXISTS idx_sms_verified ON sms(verified_by);
            
            -- إضافة حقل status للجداول الموجودة (إذا لم يكن موجوداً)
            CREATE TABLE IF NOT EXISTS sms_temp AS SELECT * FROM sms LIMIT 0;
            PRAGMA table_info(sms);
        ''')
        
        # التحقق من وجود حقل status وإضافته إذا لم يكن موجوداً
        cursor = conn.execute("PRAGMA table_info(sms)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'status' not in columns:
            conn.execute('ALTER TABLE sms ADD COLUMN status TEXT DEFAULT "REC UNREAD"')
            print_status("✅ Added status column to sms table", "SUCCESS")
        
        conn.executescript('''

            -- جدول عمليات التحقق
            CREATE TABLE IF NOT EXISTS verification (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                sms_id INTEGER,
                status TEXT CHECK(status IN ('success', 'failed')),
                verified_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id),
                FOREIGN KEY (sms_id) REFERENCES sms(id)
            );
            CREATE INDEX IF NOT EXISTS idx_verification_user ON verification(user_id);
            CREATE INDEX IF NOT EXISTS idx_verification_sms ON verification(sms_id);
            CREATE INDEX IF NOT EXISTS idx_verification_status ON verification(status);
        ''')
        
        print_status("✅ تم تهيئة قاعدة البيانات وإنشاء الفهارس بنجاح", "SUCCESS")

def verify_message_saved(sender, content):
    """التحقق من حفظ الرسالة في قاعدة البيانات"""
    try:
        with get_db_connection(commit_on_success=False) as conn:
            cursor = conn.execute('SELECT id FROM sms WHERE sender = ? AND content = ?', (sender, content))
            result = cursor.fetchone()
            return result is not None
    except Exception as e:
        print_status(f"خطأ في التحقق من حفظ الرسالة: {e}", "ERROR")
        return False

def message_exists(sender, content):
    """التحقق من وجود الرسالة في قاعدة البيانات"""
    try:
        with get_db_connection(commit_on_success=False) as conn:
            cursor = conn.execute('SELECT id FROM sms WHERE sender = ? AND content = ?', (sender, content))
            result = cursor.fetchone()
            if result:
                print_status(f"الرسالة موجودة مسبقاً في قاعدة البيانات", "DEBUG")
                return True
            return False
    except Exception as e:
        print_status(f"خطأ في التحقق من وجود الرسالة: {e}", "ERROR")
        return False

def save_sms(status, sender, timestamp, content):
    """حفظ رسالة SMS جديدة في قاعدة البيانات مع تجنب التكرار"""
    try:
        # تحويل التاريخ لصيغة موحدة
        parsed_date = parse_modem_date(timestamp)
          with get_db_connection() as conn:
            # التحقق من وجود رسالة مماثلة في آخر 5 دقائق (تجنب التكرار)
            cursor = conn.execute('''
                SELECT id FROM sms 
                WHERE sender = ? AND content = ? 
                AND datetime(received_date) > datetime('now', '-5 minutes')
                LIMIT 1
            ''', (sender, content))
            
            existing = cursor.fetchone()
            if existing:
                print_status(f"⚠️ Duplicate message detected, skipping save", "WARN")
                return True  # Return True to indicate "handled" (even if duplicate)
            
            # حفظ الرسالة الجديدة
            conn.execute(
                'INSERT INTO sms (status, sender, received_date, content, is_sent_to_telegram) VALUES (?, ?, ?, ?, 0)',
                (status, sender, parsed_date, content)
            )
            print_status(f"📝 New SMS saved to database", "SUCCESS")
            return True
            
    except sqlite3.Error as e:
        print_status(f"خطأ في حفظ الرسالة: {e}", "ERROR")
        return False

def mark_message_deleted(msg_id):
    """تحديث حالة حذف الرسالة من الشريحة"""
    try:
        with get_db_connection() as conn:
            conn.execute('UPDATE sms SET deleted_from_sim = 1 WHERE id = ?', (msg_id,))
            return True
    except Exception as e:
        print_status(f"خطأ في تحديث حالة حذف الرسالة: {e}", "ERROR")
        return False

def get_user_by_telegram_id(telegram_id):
    """الحصول على بيانات المستخدم من خلال معرف التليجرام"""
    try:
        with get_db_connection(commit_on_success=False) as conn:
            cursor = conn.execute(
                'SELECT * FROM users WHERE telegram_id = ?',
                (telegram_id,)
            )
            result = cursor.fetchone()
            return dict(result) if result else None
    except sqlite3.Error as e:
        print_status(f"خطأ في جلب معلومات المستخدم: {e}", "ERROR")
        return None

def save_or_update_user(telegram_id, username=None, phone_number=None, is_admin=0):
    """حفظ أو تحديث بيانات المستخدم"""
    try:
        with get_db_connection() as conn:
            conn.execute('''INSERT INTO users (telegram_id, username, phone_number, is_admin)
                           VALUES (?, ?, ?, ?)
                           ON CONFLICT(telegram_id) 
                           DO UPDATE SET username=?, phone_number=?''',
                         (telegram_id, username, phone_number, is_admin, username, phone_number))
            return True
    except Exception as e:
        print_status(f"خطأ في حفظ/تحديث المستخدم: {e}", "ERROR")
        return False

def add_verification(user_id: int, sms_id: Optional[int], status: str, retries: int = 3) -> bool:
    """
    إضافة عملية تحقق جديدة مع إعادة المحاولة في حالة الفشل
    """
    for attempt in range(retries):
        try:
            with get_db_connection() as conn:
                conn.execute('''
                    INSERT INTO verification (user_id, sms_id, status)
                    VALUES (?, ?, ?)
                ''', (user_id, sms_id, status))
                return True
        except sqlite3.Error as e:
            if attempt == retries - 1:
                print_status(f"فشل إضافة عملية التحقق بعد {retries} محاولات: {e}", "ERROR")
                return False
            continue
    return False

def get_transaction_by_details(amount: float, date: str, time: str, margin_minutes: int = 0) -> Optional[Dict[str, Any]]:
    """
    البحث عن عملية تعبئة بناءً على التاريخ والوقت فقط (received_date)، والمبلغ يُستخرج من content
    يبحث في جميع الرسائل بغض النظر عن المرسل
    """
    try:
        with get_db_connection(commit_on_success=False) as conn:
            c = conn.cursor()
            target_dt = datetime.strptime(f"{date} {time}", "%d/%m/%Y %H:%M")
            start_dt = target_dt - timedelta(minutes=margin_minutes) if margin_minutes > 0 else target_dt
            end_dt = target_dt + timedelta(minutes=margin_minutes) if margin_minutes > 0 else target_dt
            
            # البحث عن الرسائل في النطاق الزمني من جميع المرسلين
            query = '''
                SELECT s.*, v.user_id as verified_by_user
                FROM sms s
                LEFT JOIN verification v ON s.id = v.sms_id AND v.status = 'success'
                WHERE strftime('%Y-%m-%d %H:%M', s.received_date) BETWEEN ? AND ?
            '''
            c.execute(query, (
                start_dt.strftime("%Y-%m-%d %H:%M"),
                end_dt.strftime("%Y-%m-%d %H:%M")
            ))
            results = c.fetchall()
            
            # تحقق من المبلغ داخل content فقط بعد جلب النتائج
            for row in results:
                content = row['content'] or ''
                # قبول المبلغ كـ 1400 أو 1400.00 أو 1400,00
                if (f"{int(float(amount))}" in content or f"{float(amount):.2f}" in content or f"{float(amount):.2f}".replace('.', ',') in content):
                    return dict(row)
            return None
    except Exception as e:
        print_status(f"خطأ في البحث عن العملية: {e}", "ERROR")
        return None

def get_unverified_messages():
    """الحصول على الرسائل غير المتحقق منها"""
    try:
        with get_db_connection(commit_on_success=False) as conn:
            cursor = conn.execute('''SELECT * FROM sms 
                                    WHERE verified_by IS NULL 
                                    ORDER BY received_date ASC''')
            messages = cursor.fetchall()
            return [dict(msg) for msg in messages]
    except Exception as e:
        print_status(f"خطأ في جلب الرسائل غير المتحقق منها: {e}", "ERROR")
        return []

def get_user_stats(user_id):
    """جلب إحصائيات المستخدم للعمليات الناجحة فقط"""
    try:
        with get_db_connection(commit_on_success=False) as conn:
            # عمليات التحقق الناجحة فقط
            cursor = conn.execute('''
                SELECT 
                    COUNT(*) as successful,
                    MAX(verified_at) as last_activity
                FROM verification
                WHERE user_id = ? AND status = 'success'
            ''', (user_id,))
            
            result = cursor.fetchone()
            successful, last_activity = result if result else (0, None)
            
            return {
                'successful_verifications': successful or 0,
                'last_activity': last_activity
            }
        
    except Exception as e:
        print_status(f"خطأ في جلب إحصائيات المستخدم: {e}", "ERROR")
        return {
            'successful_verifications': 0,
            'last_activity': None
        }

def get_failed_attempts_today(user_id: int) -> int:
    """
    حساب عدد محاولات التحقق الفاشلة لهذا المستخدم اليوم
    """
    try:
        with get_db_connection(commit_on_success=False) as conn:
            cursor = conn.execute('''
                SELECT COUNT(*) as count
                FROM verification 
                WHERE user_id = ? 
                AND status = 'failed' 
                AND DATE(verified_at) = DATE('now')
            ''', (user_id,))
            result = cursor.fetchone()
            return result['count'] if result else 0
    except Exception as e:
        print_status(f"خطأ في حساب عدد المحاولات الفاشلة: {e}", "ERROR")
        return 0

def get_user_last_success(user_id: int) -> Optional[Dict]:
    """
    الحصول على آخر عملية تحقق ناجحة للمستخدم
    """
    try:
        with get_db_connection(commit_on_success=False) as conn:
            cursor = conn.execute('''
                SELECT v.*, s.content, s.received_date
                FROM verification v
                LEFT JOIN sms s ON v.sms_id = s.id
                WHERE v.user_id = ? 
                AND v.status = 'success'
                ORDER BY v.verified_at DESC
                LIMIT 1
            ''', (user_id,))
            result = cursor.fetchone()
            return dict(result) if result else None
    except Exception as e:
        print_status(f"خطأ في جلب آخر عملية نجاح: {e}", "ERROR")
        return None

def get_user_verifications(user_id: int) -> list:
    """إرجاع جميع عمليات التحقق (success/failed) لمستخدم معين"""
    try:
        with get_db_connection(commit_on_success=False) as conn:
            cursor = conn.execute('''SELECT * FROM verification WHERE user_id = ? ORDER BY verified_at DESC''', (user_id,))
            return [dict(row) for row in cursor.fetchall()]
    except Exception as e:
        print_status(f"خطأ في جلب عمليات التحقق للمستخدم: {e}", "ERROR")
        return []